{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/userinfo.email": {
          "description": "View your email address"
        }
      }
    }
  },
  "basePath": "/_ah/api/content/v1/",
  "baseUrl": "https://kintaro-content-server.appspot.com/_ah/api/content/v1/",
  "batchPath": "batch",
  "description": "This is an API",
  "discoveryVersion": "v1",
  "icons": {
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png",
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png"
  },
  "id": "content:v1",
  "kind": "discovery#restDescription",
  "name": "content",
  "parameters": {
    "alt": {
      "default": "json",
      "description": "Data format for the response.",
      "enum": [
        "json"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
      "location": "query",
      "type": "string"
    },
    "userIp": {
      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "collections": {
      "methods": {
        "createCollection": {
          "description": "Creates a collection.\n\n    Args:\n      request: A CollectionMessage object whose fields will be used to populate\n        the new Collection.\n      repo: Repo the collection belongs to. Automatically injected by the\n        context injector.\n\n    Returns:\n      A CollectionMessage representing the newly created Collection.\n\n    Raises:\n      BadRequestException: If attempting to create a collection with an invalid\n          id or without a schema id.\n    ",
          "httpMethod": "POST",
          "id": "content.collections.createCollection",
          "path": "collections",
          "request": {
            "$ref": "Collection",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Collection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteCollection": {
          "description": "Deletes collection.\n\n    A user must have permissions to delete documents for all projects using the\n    collection's repo to delete a collection.\n\n    Deleting published collections is not yet supported.\n\n    Args:\n      request: unused\n      repo: Repo model containing the collection.\n      collection: Collection model\n\n    Returns:\n      VoidMessage\n    Raises:\n      BadRequestException: If the collection is used by an existing reference\n        field in the repo.\n      BadRequestException: If the collection has an active translation request.\n      UserAuthorizationError: If user doesn't have permission to delete docs for\n        one or more of the projects using the collection.\n    ",
          "httpMethod": "Post",
          "id": "content.collections.deleteCollection",
          "path": "collections/delete",
          "request": {
            "$ref": "Collection",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getCollection": {
          "httpMethod": "POST",
          "id": "content.collections.getCollection",
          "path": "collection",
          "request": {
            "$ref": "CollectionGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Collection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getCollectionUsage": {
          "httpMethod": "POST",
          "id": "content.collections.getCollectionUsage",
          "path": "collections/usage",
          "request": {
            "$ref": "CollectionUsageRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CollectionUsageResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listCollections": {
          "httpMethod": "POST",
          "id": "content.collections.listCollections",
          "path": "collection-list",
          "request": {
            "$ref": "CollectionListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CollectionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateCollection": {
          "description": "Updates a collection.\n\n    Args:\n      request: A update collection resource whose fields will be used to edit\n        the Collection identified by the id in the path. Missing fields will\n        revert the Collection's fields to None/empty array as appropriate.\n      repo: Repo the collection belongs to. Automatically injected by the\n        context injector.\n      collection: Collection model.\n\n    Returns:\n      A CollectionMessage repesenting the updated Collection.\n\n    Raises:\n      NotFoundError: If can't find a collection with the given id.\n    ",
          "httpMethod": "POST",
          "id": "content.collections.updateCollection",
          "path": "collections/update-collection",
          "request": {
            "$ref": "Collection",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Collection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "diff": {
      "methods": {
        "diffCollection": {
          "httpMethod": "POST",
          "id": "content.diff.diffCollection",
          "path": "diff/diff-collection",
          "request": {
            "$ref": "DiffCollectionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DiffCollectionResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "diffCollectionPreMerge": {
          "description": "Diffs a collection while preSyncing and preMerging.",
          "httpMethod": "POST",
          "id": "content.diff.diffCollectionPreMerge",
          "path": "diff/diff-collection-pre-merge",
          "request": {
            "$ref": "DiffCollectionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DiffCollectionResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "diffDocuments": {
          "description": "Diffs documents, returning only properties updated or in conflict.",
          "httpMethod": "POST",
          "id": "content.diff.diffDocuments",
          "path": "diff/diff-documents",
          "request": {
            "$ref": "DiffDocumentsRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DiffDocumentsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "recordCUJState": {
          "description": "Records the CUJ state number when merging a workspace.\n\n    Args:\n      request: The request (merge_protorpc.CUJStateRecordRequest) object.\n\n    Returns:\n      VoidMessage.\n    ",
          "httpMethod": "POST",
          "id": "content.diff.recordCUJState",
          "path": "diff/record-cuj-state",
          "request": {
            "$ref": "CUJStateRecordRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "recordDiffLatency": {
          "description": "Records the latency when diffing a workspace.\n\n    Args:\n      request: The request (merge_protorpc.DiffLatencyRecordRequest) object.\n\n    Returns:\n      VoidMessage.\n    ",
          "httpMethod": "POST",
          "id": "content.diff.recordDiffLatency",
          "path": "diff/record-diff-latency",
          "request": {
            "$ref": "DiffLatencyRecordRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "documents": {
      "methods": {
        "copyDocument": {
          "description": "Creates a copy of a document.",
          "httpMethod": "POST",
          "id": "content.documents.copyDocument",
          "path": "documents/copy",
          "request": {
            "$ref": "DocumentCopyRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "copyDocumentLocaleContent": {
          "description": "Copy document content among locales.",
          "httpMethod": "POST",
          "id": "content.documents.copyDocumentLocaleContent",
          "path": "documents/copy_document_locale_content",
          "request": {
            "$ref": "LocaleContentCopyRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "createDocument": {
          "description": "Creates a Document.",
          "httpMethod": "POST",
          "id": "content.documents.createDocument",
          "path": "documents",
          "request": {
            "$ref": "DocumentCreateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteDocument": {
          "description": "Deletes a document.",
          "httpMethod": "POST",
          "id": "content.documents.deleteDocument",
          "path": "documents/delete",
          "request": {
            "$ref": "DocumentDeleteRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "editDocument": {
          "description": "Updates a document.",
          "httpMethod": "POST",
          "id": "content.documents.editDocument",
          "parameterOrder": [
            "document_id",
            "collection_id",
            "project_id",
            "repo_id"
          ],
          "parameters": {
            "collection_id": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "document_id": {
              "format": "int64",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "include_schema": {
              "location": "query",
              "type": "boolean"
            },
            "project_id": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "repo_id": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "documents/{document_id}",
          "request": {
            "$ref": "DocumentContent",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "editField": {
          "description": "Updates a document's field.\n\n    Args:\n      request: Request object\n      document: Injected Document proxy.\n      repo: Injected Repo proxy.\n    ",
          "httpMethod": "POST",
          "id": "content.documents.editField",
          "path": "documents/edit-field",
          "request": {
            "$ref": "FieldEdit",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getDocument": {
          "description": "Get content for document, or return 400 if not possible.\n\n    If a request is made for a document within a project, four things may\n    happen:\n      - If a locale is requested but is not valid for the project, a 400 error\n        is returned.\n      - If the document doesn't exist in the project, a 404 is returned.\n      - If the locale requested is valid for the project and the document exists\n        in the project, but no localized content exists within the project for\n        the requested locale, root content is returned (with locale-varied\n        fields blank).\n      - If the locale requested is valid, the document exists, and content for\n        the locale exists, existing content for the locale is returned.\n\n    This same pattern applies to published, with the caveat that all locales are\n    considered valid for published.\n    ",
          "httpMethod": "GET",
          "id": "content.documents.getDocument",
          "parameterOrder": [
            "document_id"
          ],
          "parameters": {
            "collection_id": {
              "location": "query",
              "type": "string"
            },
            "depth": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "document_id": {
              "format": "int64",
              "location": "path",
              "type": "string"
            },
            "field_mask": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "goro_client_options.delegated_for": {
              "location": "query",
              "type": "string"
            },
            "include_schema": {
              "location": "query",
              "type": "boolean"
            },
            "include_translation_status": {
              "default": "true",
              "location": "query",
              "type": "boolean"
            },
            "include_validation_errors": {
              "location": "query",
              "type": "boolean"
            },
            "label": {
              "location": "query",
              "type": "string"
            },
            "locale": {
              "location": "query",
              "type": "string"
            },
            "project_id": {
              "location": "query",
              "type": "string"
            },
            "repo_id": {
              "location": "query",
              "type": "string"
            },
            "use_json": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "documents/{document_id}",
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getDocumentByParams": {
          "description": "Same as DocumentGet, but doesn't get by ID necessarily.\n\n    Currently supports getting by label or by ID. See DocumentGet for how\n    locale and project parameters are used.\n    If an ID is provided, that will be used first. Otherwise, it will try to use\n    the label field as a label, and failing that, fallback on using the contents\n    of the label field as a document ID.\n    ",
          "httpMethod": "GET",
          "id": "content.documents.getDocumentByParams",
          "parameters": {
            "collection_id": {
              "location": "query",
              "type": "string"
            },
            "depth": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "document_id": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "field_mask": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "goro_client_options.delegated_for": {
              "location": "query",
              "type": "string"
            },
            "include_schema": {
              "location": "query",
              "type": "boolean"
            },
            "include_translation_status": {
              "default": "true",
              "location": "query",
              "type": "boolean"
            },
            "include_validation_errors": {
              "location": "query",
              "type": "boolean"
            },
            "label": {
              "location": "query",
              "type": "string"
            },
            "locale": {
              "location": "query",
              "type": "string"
            },
            "project_id": {
              "location": "query",
              "type": "string"
            },
            "repo_id": {
              "location": "query",
              "type": "string"
            },
            "use_json": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "documents/get",
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getDocumentVersion": {
          "description": "Gets version for specific document.",
          "httpMethod": "POST",
          "id": "content.documents.getDocumentVersion",
          "path": "documents/versions/get",
          "request": {
            "$ref": "DocumentVersionGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DocumentVersion"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getFieldsByDescriptor": {
          "description": "Gets FieldValues for one or more FieldHeaders.",
          "httpMethod": "POST",
          "id": "content.documents.getFieldsByDescriptor",
          "path": "documents/fields/",
          "request": {
            "$ref": "GetFieldsByDescriptorRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "GetFieldsByDescriptorResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listDocumentHeaders": {
          "description": "Gets a DocumentHeaderList for a collection.",
          "httpMethod": "POST",
          "id": "content.documents.listDocumentHeaders",
          "path": "documents/headers",
          "request": {
            "$ref": "DocumentHeaderListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DocumentHeaderList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listDocumentSummaries": {
          "description": "Gets contents for all matching documents from document index.",
          "httpMethod": "GET",
          "id": "content.documents.listDocumentSummaries",
          "parameters": {
            "collection_id": {
              "location": "query",
              "type": "string"
            },
            "field_mask": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "limit": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "offset": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "project_id": {
              "location": "query",
              "type": "string"
            },
            "query_string": {
              "location": "query",
              "type": "string"
            },
            "repo_id": {
              "location": "query",
              "type": "string"
            },
            "return_json": {
              "location": "query",
              "type": "boolean"
            },
            "sorts.field.meta_field": {
              "enum": [
                "UNKNOWN",
                "CREATED_BY",
                "CREATED_ON",
                "UPDATED_BY",
                "UPDATED_ON",
                "PUBLISH_TIMESTAMP",
                "DOCUMENT_STATE",
                "PERFORMANCE"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "sorts.field.user_field": {
              "location": "query",
              "type": "string"
            },
            "sorts.order": {
              "enum": [
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            }
          },
          "path": "documents/listDocumentSummaries",
          "response": {
            "$ref": "DocumentList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listDocumentVersions": {
          "description": "Lists document versions.",
          "httpMethod": "POST",
          "id": "content.documents.listDocumentVersions",
          "path": "documents/versions",
          "request": {
            "$ref": "DocumentVersionListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DocumentVersionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listDocuments": {
          "description": "This method is deprecated! Please use Search instead.",
          "httpMethod": "GET",
          "id": "content.documents.listDocuments",
          "parameterOrder": [
            "repo_id",
            "collection_id"
          ],
          "parameters": {
            "collection_id": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "limit": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "locale": {
              "location": "query",
              "type": "string"
            },
            "offset": {
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "project_id": {
              "location": "query",
              "type": "string"
            },
            "repo_id": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "summary_view": {
              "location": "query",
              "type": "boolean"
            },
            "use_json": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "documents/{repo_id}/{collection_id}",
          "response": {
            "$ref": "DocumentList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "multiDocumentCreate": {
          "httpMethod": "POST",
          "id": "content.documents.multiDocumentCreate",
          "path": "documents/add-multi",
          "request": {
            "$ref": "MultiDocumentCreateRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "multiDocumentUpdate": {
          "httpMethod": "POST",
          "id": "content.documents.multiDocumentUpdate",
          "path": "documents/update-multi",
          "request": {
            "$ref": "MultiDocumentUpdateRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "multiTranslationReadinessUpdate": {
          "description": "Updates translation readiness of multi documents in a project.",
          "httpMethod": "POST",
          "id": "content.documents.multiTranslationReadinessUpdate",
          "path": "documents/update-translation-readiness",
          "request": {
            "$ref": "MultiTranslationReadinessUpdateRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "revertDocument": {
          "description": "Reverts a document to a specific version by creating a new snapshot.",
          "httpMethod": "POST",
          "id": "content.documents.revertDocument",
          "path": "documents/versions/revert",
          "request": {
            "$ref": "RevertRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "rpcDocumentGet": {
          "description": "POST-only version of DocumentGet, for Stubby use.",
          "httpMethod": "POST",
          "id": "content.documents.rpcDocumentGet",
          "path": "documents/rpc-document-get",
          "request": {
            "$ref": "DocumentGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "searchBranch": {
          "description": "Searches all docs in a branch (optionally limited by collection or doc).\n\n    See BranchSearchRequest for more details.\n    ",
          "httpMethod": "POST",
          "id": "content.documents.searchBranch",
          "path": "documents/branch-search",
          "request": {
            "$ref": "BranchSearchRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "BranchSearchResult"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "searchDocuments": {
          "description": "Document search.",
          "httpMethod": "POST",
          "id": "content.documents.searchDocuments",
          "path": "documents/search",
          "request": {
            "$ref": "SearchRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "SearchResult"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateDocument": {
          "description": "Alias for DocumentEdit via RPC.",
          "httpMethod": "POST",
          "id": "content.documents.updateDocument",
          "path": "documents/update",
          "request": {
            "$ref": "DocumentUpdateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Document"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "firebase": {
      "methods": {
        "getCustomToken": {
          "description": "Gets a token for Firebase.\n\n    The token is authorized for uid: channel_id and its claim includes the\n    requesting user's email. The Firebase DB config only grants permissions to a\n    channel if the channel_id prefix is the same as the user email in the claim.\n\n    Args:\n      request: A GetCustomTokenRequest.\n\n    Returns:\n      A GetCustomToken response.\n    ",
          "httpMethod": "POST",
          "id": "content.firebase.getCustomToken",
          "path": "firebase/tokens",
          "request": {
            "$ref": "GetCustomTokenRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "GetCustomTokenResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "id_name_converter": {
      "methods": {
        "idNameConverter": {
          "httpMethod": "POST",
          "id": "content.id_name_converter.idNameConverter",
          "path": "id-name-converter",
          "request": {
            "$ref": "IdNameConverterRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "IdNameConverterResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "locale": {
      "methods": {
        "getLocaleInfo": {
          "description": "Get the Kintaro locale info.",
          "httpMethod": "POST",
          "id": "content.locale.getLocaleInfo",
          "path": "locale/locales_info",
          "response": {
            "$ref": "LocaleInfoResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "merge": {
      "methods": {
        "applyProjectMerges": {
          "httpMethod": "POST",
          "id": "content.merge.applyProjectMerges",
          "path": "merge/project/apply-merges",
          "request": {
            "$ref": "ProjectMergeAction",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ApplyMergesResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "findDocumentMerges": {
          "description": "Gets a ProjectMergeInfo containing just a single document.",
          "httpMethod": "POST",
          "id": "content.merge.findDocumentMerges",
          "path": "merge/project/find-document-merges",
          "request": {
            "$ref": "FindDocumentMergesRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "FindMergesResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "findMultiDocumentMerges": {
          "description": "Gets a ProjectMergeInfo containing multiple documents.",
          "httpMethod": "POST",
          "id": "content.merge.findMultiDocumentMerges",
          "path": "merge/project/find-multi/",
          "request": {
            "$ref": "FindMultiDocumentMergesRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "FindMergesResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "findProjectMerges": {
          "httpMethod": "GET",
          "id": "content.merge.findProjectMerges",
          "parameterOrder": [
            "path_project_id"
          ],
          "parameters": {
            "path_project_id": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "merge/project/{path_project_id}",
          "response": {
            "$ref": "FindMergesResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "recordMergeLatency": {
          "description": "Records the latency when merging a workspace.\n\n    Args:\n      request: The request (merge_protorpc.MergeLatencyRecordRequest) object.\n\n    Returns:\n      VoidMessage.\n    ",
          "httpMethod": "POST",
          "id": "content.merge.recordMergeLatency",
          "path": "merge/record-merge-latency",
          "request": {
            "$ref": "MergeLatencyRecordRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "permissions": {
      "methods": {
        "checkPermissionCurrentUser": {
          "httpMethod": "GET",
          "id": "content.permissions.checkPermissionCurrentUser",
          "parameters": {
            "goro_client_options.delegated_for": {
              "location": "query",
              "type": "string"
            },
            "object_id": {
              "location": "query",
              "type": "string"
            },
            "object_type": {
              "enum": [
                "UNKNOWN_OBJECT_TYPE",
                "GLOBAL",
                "PROJECT",
                "REPO"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "relation": {
              "enum": [
                "UNKNOWN_RELATION",
                "KINTARO_USER",
                "KINTARO_ADMIN",
                "KINTARO_REPO_CREATOR",
                "REPO_OWNER",
                "REPO_USER_MANAGER",
                "REPO_ARCHITECT",
                "REPO_VIEWER",
                "PROJECT_OWNER",
                "PROJECT_DOC_WRITER",
                "PROJECT_VIEWER",
                "PROJECT_TRANSLATION_WRITER",
                "ACTION_READ_DOCUMENT",
                "SITE_DOC_WRITER",
                "SITE_TRANSLATION_WRITER",
                "SITE_PUBLISHER",
                "ACTION_PUBLISH_PROJECT",
                "ACTION_READ_PROJECT",
                "ACTION_READ_REPO",
                "PROJECT_TRANSLATION_VENDOR"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            }
          },
          "path": "permissions/check",
          "response": {
            "$ref": "PermissionCheckResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deletePermissions": {
          "httpMethod": "POST",
          "id": "content.permissions.deletePermissions",
          "path": "permissions_delete",
          "request": {
            "$ref": "PermissionList",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "PermissionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listPermission": {
          "description": "Returns a list of Permissions that match the criteria.\n\n    Args:\n      request: Parameters object_id, object_type, and relation. These should be\n        proto enums. If relation is not specified, then this will return all\n        role permissions for the object.\n\n    Returns:\n      A PermissionList proto message.\n    ",
          "httpMethod": "GET",
          "id": "content.permissions.listPermission",
          "parameters": {
            "object_id": {
              "location": "query",
              "type": "string"
            },
            "object_type": {
              "enum": [
                "UNKNOWN_OBJECT_TYPE",
                "GLOBAL",
                "PROJECT",
                "REPO"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "relation": {
              "enum": [
                "UNKNOWN_RELATION",
                "KINTARO_USER",
                "KINTARO_ADMIN",
                "KINTARO_REPO_CREATOR",
                "REPO_OWNER",
                "REPO_USER_MANAGER",
                "REPO_ARCHITECT",
                "REPO_VIEWER",
                "PROJECT_OWNER",
                "PROJECT_DOC_WRITER",
                "PROJECT_VIEWER",
                "PROJECT_TRANSLATION_WRITER",
                "ACTION_READ_DOCUMENT",
                "SITE_DOC_WRITER",
                "SITE_TRANSLATION_WRITER",
                "SITE_PUBLISHER",
                "ACTION_PUBLISH_PROJECT",
                "ACTION_READ_PROJECT",
                "ACTION_READ_REPO",
                "PROJECT_TRANSLATION_VENDOR"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            }
          },
          "path": "permissions",
          "response": {
            "$ref": "PermissionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "setPermissions": {
          "httpMethod": "POST",
          "id": "content.permissions.setPermissions",
          "path": "permissions",
          "request": {
            "$ref": "PermissionList",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "PermissionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updatePermissionsSingleObject": {
          "description": "Updates the permissions on a single object.\n\n    This changes the object's permissions to the list of permissions given.\n    That is, all permissions in the list will be set, and any existing\n    permissions not in the list will be deleted.\n\n    Args:\n      request: Parameters object_id, object_type, and permissions.\n\n    Returns:\n      A PermissionList proto message containing the permissions that were set.\n    Raises:\n      exceptions.PermissionsError: if the user tries to do a no-op permission\n      update but shouldn't be allowed to modify the permissions.\n    ",
          "httpMethod": "POST",
          "id": "content.permissions.updatePermissionsSingleObject",
          "path": "permissions/update-single-object",
          "request": {
            "$ref": "PermissionsUpdateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "PermissionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "projects": {
      "methods": {
        "archiveProject": {
          "description": "Archives a project.",
          "httpMethod": "POST",
          "id": "content.projects.archiveProject",
          "path": "projects/archive",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "createProject": {
          "description": "Creates a project.\n\n    Args:\n      request: A Project message object whose fields will be used to populate\n        the new Project.\n\n    Returns:\n      A Project message representing the newly created Project.\n\n    Raises:\n      ConflictException: If attempting to create a project with a duplicate id.\n      BadRequestException: If attempting to create a project with an invalid id,\n        or attempting to create a project with locales.\n    ",
          "httpMethod": "POST",
          "id": "content.projects.createProject",
          "path": "projects",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Project"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getCollectionInfo": {
          "description": "Gets info on a single collection within a project or published branch.",
          "httpMethod": "GET",
          "id": "content.projects.getCollectionInfo",
          "parameters": {
            "collection_id": {
              "location": "query",
              "type": "string"
            },
            "include_pending_operations": {
              "location": "query",
              "type": "boolean"
            },
            "project_id": {
              "location": "query",
              "type": "string"
            },
            "repo_id": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "projects/info",
          "response": {
            "$ref": "Collection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getCollections": {
          "description": "Returns list of all collections in the project.",
          "httpMethod": "POST",
          "id": "content.projects.getCollections",
          "path": "projects/collections",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CollectionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getOutOfSyncCollections": {
          "description": "Gets all collections within a project with out-of-sync translations.",
          "httpMethod": "POST",
          "id": "content.projects.getOutOfSyncCollections",
          "path": "projects/out-of-sync",
          "request": {
            "$ref": "ProjectGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CollectionList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getOutOfSyncHeaders": {
          "description": "Gets DocumentHeaders for all docs in a project that are out-of-sync.",
          "httpMethod": "POST",
          "id": "content.projects.getOutOfSyncHeaders",
          "path": "projects/out-of-sync-headers",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DocumentHeaderList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getProject": {
          "description": "DEPRECATED. Please use rpcGetProject.",
          "httpMethod": "GET",
          "id": "content.projects.getProject",
          "parameterOrder": [
            "path_project_id"
          ],
          "parameters": {
            "include_content_last_modified": {
              "location": "query",
              "type": "boolean"
            },
            "include_document_counts": {
              "location": "query",
              "type": "boolean"
            },
            "path_project_id": {
              "location": "path",
              "type": "string"
            }
          },
          "path": "projects/{path_project_id}",
          "response": {
            "$ref": "Project"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listDocumentHeaders": {
          "description": "Gets a list DocumentHeaders in the project.",
          "httpMethod": "POST",
          "id": "content.projects.listDocumentHeaders",
          "path": "projects/list-document-headers",
          "request": {
            "$ref": "ProjectDocumentHeaderListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DocumentHeaderList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listHeaders": {
          "description": "Gets all DocumentHeaders in the project.",
          "httpMethod": "POST",
          "id": "content.projects.listHeaders",
          "path": "projects/list-headers",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "DocumentHeaderList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listProjects": {
          "description": "Lists projects.\n\n    Args:\n      request: Contains the followings:\n        - permission: Required permission for projects to be listed. Used to\n          select only projects on which the user has a specific role.\n        - sort_by: Attribute of the Project message to sort the projects by.\n          Dotted notation (e.g. mod_info.updated_on) is supported. Defaults to\n          'name'.\n        - reverse_order: Whether or not the order should be reversed. Defaults\n          to False.\n        - include_archived: Whether to include archived projects also in\n          response or not\n      opt_repo: ID of the repo for which the projects are fetched.\n\n    Returns:\n      A ProjectList message.\n\n    Raises:\n      BadRequestException: If the Project message doesn't have sort_by as an\n          attribute.\n    ",
          "httpMethod": "POST",
          "id": "content.projects.listProjects",
          "path": "list-projects",
          "request": {
            "$ref": "ProjectListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ProjectList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "projectHistory": {
          "httpMethod": "POST",
          "id": "content.projects.projectHistory",
          "path": "projects/project-history",
          "request": {
            "$ref": "ProjectHistoryListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ProjectHistoryListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "projectReset": {
          "httpMethod": "POST",
          "id": "content.projects.projectReset",
          "path": "projects/project-reset",
          "request": {
            "$ref": "ProjectResetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ProjectResetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "rpcGetProject": {
          "httpMethod": "POST",
          "id": "content.projects.rpcGetProject",
          "path": "project",
          "request": {
            "$ref": "ProjectGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Project"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "scheduleReindex": {
          "description": "Schedules all refs in this project to be reindexed.",
          "httpMethod": "POST",
          "id": "content.projects.scheduleReindex",
          "path": "projects/schedule-reindex",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unArchiveProject": {
          "description": "Unarchives a project. Shhh...This method is a secret.",
          "httpMethod": "POST",
          "id": "content.projects.unArchiveProject",
          "path": "projects/unarchive",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateProject": {
          "description": "Updates a project.\n\n    Args:\n      request: A Update Project Resource whose fields will be used to update the\n        Project identified by {path_project_id}.\n      project: Injected project.\n\n    Returns:\n      A Project message representing the updated Project.\n\n    Raises:\n      NotFoundException: If a project with the requested ID does not exist.\n    ",
          "httpMethod": "POST",
          "id": "content.projects.updateProject",
          "path": "projects/update-project",
          "request": {
            "$ref": "Project",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Project"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "publish": {
      "methods": {
        "history": {
          "description": "Returns history of past publishes for the repo.\n\n    Supports pagination via limit/offset. Publishes are ordered desc\n    by timestamp (most recent publish first).\n\n    Args:\n      request: GetHistory parameters.\n      repo: Injected repo.\n\n    Returns:\n      History of past publishes for the repo.\n    ",
          "httpMethod": "GET",
          "id": "content.publish.history",
          "parameters": {
            "goro_client_options.delegated_for": {
              "location": "query",
              "type": "string"
            },
            "limit": {
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "offset": {
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "repo_id": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "publish/history",
          "response": {
            "$ref": "PublishHistory"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "nukeCollection": {
          "httpMethod": "POST",
          "id": "content.publish.nukeCollection",
          "path": "publish/nuke-collection",
          "request": {
            "$ref": "NukeCollectionRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "nukeDocument": {
          "httpMethod": "POST",
          "id": "content.publish.nukeDocument",
          "path": "publish/nuke-document",
          "request": {
            "$ref": "NukeDocumentRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "nukeMultiDocument": {
          "httpMethod": "POST",
          "id": "content.publish.nukeMultiDocument",
          "path": "publish/nuke-multi-document",
          "request": {
            "$ref": "NukeMultiDocumentRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "preview": {
          "description": "Provides publish preview data.\n\n    Args:\n      request: Request that contains project id.\n      project: Injected project.\n\n    Returns:\n      List of documents that can be published along with any warnings\n      related to publish operation.\n    ",
          "httpMethod": "POST",
          "id": "content.publish.preview",
          "path": "publish/preview",
          "request": {
            "$ref": "PublishPreviewRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "PublishPreviewInfo"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "publish": {
          "description": "Publishes selected documents.\n\n    If document list is empty, then publishes all edited documents in\n    the current project.\n\n    Args:\n      request: Publish request parameters. If override_translations is True,\n        then translation sync status will not be checked prior to publish. If\n        override_merge_conflict is True, then document conflicts will not\n        prevent publish.\n\n    Returns:\n      Publish message that includes status & publish id.\n\n    Raises:\n      BadRequestException: If both documents and collection_headers are\n        specified.\n    ",
          "httpMethod": "POST",
          "id": "content.publish.publish",
          "path": "publish/publish",
          "request": {
            "$ref": "PublishRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "PublishResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "rollback": {
          "description": "Rolls back previous publish.\n\n    Rolls back all the changes that were published starting with the\n    publish defined by publish_id. Rollback operation will create a new\n    publish entry that will list every document that was impacted by this.\n\n    Args:\n      request: Rollback parameters.\n\n    Returns:\n      Publish message for rollback entry.\n    ",
          "httpMethod": "GET",
          "id": "content.publish.rollback",
          "parameterOrder": [
            "repo_id",
            "publish_id",
            "project_id"
          ],
          "parameters": {
            "project_id": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "publish_id": {
              "location": "path",
              "required": true,
              "type": "string"
            },
            "repo_id": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "publish/rollback/{repo_id}/{publish_id}",
          "response": {
            "$ref": "PublishRecord"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "status": {
          "httpMethod": "POST",
          "id": "content.publish.status",
          "path": "publish/status",
          "request": {
            "$ref": "PublishStatusRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "PublishStatusResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "push": {
      "methods": {
        "approvePush": {
          "httpMethod": "POST",
          "id": "content.push.approvePush",
          "path": "content-push/approve-push",
          "request": {
            "$ref": "ActivePushReference",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ApproveContentPushResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "cancelPush": {
          "description": "Cancels push (if it is pending) & attempts to update datastore.",
          "httpMethod": "POST",
          "id": "content.push.cancelPush",
          "path": "content-push/cancel-push",
          "request": {
            "$ref": "CancelPushRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "chewtoyDryRun": {
          "httpMethod": "POST",
          "id": "content.push.chewtoyDryRun",
          "path": "content-push/chewtoy-dryrun",
          "request": {
            "$ref": "ChewtoyDryRunRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ChewtoyDryRunResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "fetchPushInfo": {
          "httpMethod": "POST",
          "id": "content.push.fetchPushInfo",
          "path": "content-push/fetch-push-info",
          "request": {
            "$ref": "ContentPushInfoRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentPushInfoResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getPreview": {
          "httpMethod": "POST",
          "id": "content.push.getPreview",
          "path": "content-push/get-preview",
          "request": {
            "$ref": "ContentPushPreviewReference",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentPushPreview"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getPush": {
          "httpMethod": "POST",
          "id": "content.push.getPush",
          "path": "content-push/get-push",
          "request": {
            "$ref": "ContentPushGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentPushGetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "previewPush": {
          "httpMethod": "POST",
          "id": "content.push.previewPush",
          "path": "content-push/preview-push",
          "request": {
            "$ref": "ContentPushPreviewRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentPushPreviewReference"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "pushList": {
          "description": "Gets the list of ACPs for a repo.",
          "httpMethod": "POST",
          "id": "content.push.pushList",
          "path": "content-push/list-pushes",
          "request": {
            "$ref": "ContentPushListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentPushListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "startPush": {
          "description": "Starts an Automated Content Push (ACP).",
          "httpMethod": "POST",
          "id": "content.push.startPush",
          "path": "content-push/start-push",
          "request": {
            "$ref": "ContentPushRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentPushResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unApprovePush": {
          "httpMethod": "POST",
          "id": "content.push.unApprovePush",
          "path": "content-push/unapprove-push",
          "request": {
            "$ref": "ActivePushReference",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "UnApproveContentPushResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "validateApprovers": {
          "httpMethod": "POST",
          "id": "content.push.validateApprovers",
          "path": "content-push/validate-approvers",
          "request": {
            "$ref": "ValidateApproversRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ValidateApproversResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "reference_hash": {
      "methods": {
        "updateReferenceHashes": {
          "httpMethod": "POST",
          "id": "content.reference_hash.updateReferenceHashes",
          "path": "update-reference-hashes",
          "request": {
            "$ref": "UpdateReferenceHashesRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "repos": {
      "methods": {
        "archiveRepo": {
          "description": "Archives a repo.",
          "httpMethod": "POST",
          "id": "content.repos.archiveRepo",
          "path": "repos/archive",
          "request": {
            "$ref": "Repo",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "createRepo": {
          "description": "Creates a repo.\n\n    Args:\n      request: A RepoMessage object whose fields will be used to populate the\n        new Repo.\n\n    Returns:\n      A RepoMessage representing the newly created repo.\n\n    Raises:\n      ConflictException: If attempting to create a repo with a duplicate id.\n      BadRequestException: If attempting to create a repo with an invalid id.\n    ",
          "httpMethod": "POST",
          "id": "content.repos.createRepo",
          "path": "repos",
          "request": {
            "$ref": "Repo",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Repo"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getRepo": {
          "httpMethod": "POST",
          "id": "content.repos.getRepo",
          "path": "repo",
          "request": {
            "$ref": "RepoGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Repo"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getState": {
          "description": "Returns the state of a repo. See RepoState in repo.proto.",
          "httpMethod": "POST",
          "id": "content.repos.getState",
          "path": "repos/state",
          "request": {
            "$ref": "RepoGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "RepoState"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listRepoHeaders": {
          "httpMethod": "POST",
          "id": "content.repos.listRepoHeaders",
          "path": "repo-headers",
          "request": {
            "$ref": "RepoListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "RepoHeaderList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listRepos": {
          "httpMethod": "GET",
          "id": "content.repos.listRepos",
          "parameters": {
            "path_project_id": {
              "location": "query",
              "type": "string"
            },
            "return_collections": {
              "default": "true",
              "location": "query",
              "type": "boolean"
            },
            "use_cache": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "repos",
          "response": {
            "$ref": "RepoList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "recordRepoView": {
          "description": "Records the event of a user viewing a specific repo.\n\n    Args:\n      request: The request (repo_protorpc.RepoViewRecordRequest) object.\n      repo: Injected repo model.\n\n    Returns:\n      VoidMessage.\n    ",
          "httpMethod": "POST",
          "id": "content.repos.recordRepoView",
          "path": "repos/record-repo-view",
          "request": {
            "$ref": "RepoViewRecordRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unArchiveRepo": {
          "description": "Secret method to un-archive repos.\n\n    Please don't tell users about this!\n\n    N.B. This method will not re-associate the repo with any projects.\n\n    Args:\n      request: The request (repo_protorpc.Repo) object to unarchive.\n\n    Returns:\n      VoidMessage\n    ",
          "httpMethod": "POST",
          "id": "content.repos.unArchiveRepo",
          "path": "repos/unarchive",
          "request": {
            "$ref": "Repo",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateRepo": {
          "description": "Updates a repo.\n\n    Args:\n      request: A RepoMessage object with the id of the repo to be updated and\n        all fields and values the updated repo should contain.\n      repo: Injected repo. Used to check a few propreties not included in proto.\n\n    Returns:\n      A RepoMessage representing the updated repo.\n\n    Raises:\n      NotFoundException: If attempting to update a repo that does not exist.\n    ",
          "httpMethod": "POST",
          "id": "content.repos.updateRepo",
          "path": "repos/update-repo",
          "request": {
            "$ref": "Repo",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Repo"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "resource": {
      "methods": {
        "resourceCreate": {
          "httpMethod": "POST",
          "id": "content.resource.resourceCreate",
          "path": "resources",
          "request": {
            "$ref": "ResourceCreateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "resourceGet": {
          "httpMethod": "GET",
          "id": "content.resource.resourceGet",
          "parameters": {
            "goro_client_options.delegated_for": {
              "location": "query",
              "type": "string"
            },
            "resource_path": {
              "location": "query",
              "type": "string"
            },
            "resource_type": {
              "enum": [
                "UNKNOWN",
                "RASTER_IMAGE",
                "BLOB_FILE"
              ],
              "enumDescriptions": [
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "tmp": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "resources",
          "response": {
            "$ref": "Resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "schemas": {
      "methods": {
        "createSchema": {
          "httpMethod": "POST",
          "id": "content.schemas.createSchema",
          "path": "schemas",
          "request": {
            "$ref": "ContentSchema",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentSchema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteSchema": {
          "description": "Deletes the target schema.\n\n    Args:\n      request: Delete schema request body.\n      repo: The parent repo of the schema.\n\n    Raises:\n      BadRequestException: When a active translation request is found for the\n      target schema.\n\n    Returns:\n      A VoidMessage type confirming that the schema has been deleted.\n    ",
          "httpMethod": "POST",
          "id": "content.schemas.deleteSchema",
          "path": "schemas/delete-schema",
          "request": {
            "$ref": "ContentSchema",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getSchema": {
          "httpMethod": "POST",
          "id": "content.schemas.getSchema",
          "path": "schema",
          "request": {
            "$ref": "SchemaGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentSchema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getSchemaStats": {
          "description": "Returns schema stats.",
          "httpMethod": "POST",
          "id": "content.schemas.getSchemaStats",
          "path": "schemas/stats",
          "request": {
            "$ref": "ContentSchema",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "SchemaStats"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listSchemas": {
          "httpMethod": "POST",
          "id": "content.schemas.listSchemas",
          "path": "schemas/list-schemas",
          "request": {
            "$ref": "SchemaListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentSchemaList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateSchema": {
          "httpMethod": "POST",
          "id": "content.schemas.updateSchema",
          "path": "schemas/update",
          "request": {
            "$ref": "ContentSchema",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ContentSchema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "sheltieconfig": {
      "methods": {
        "createSheltieConfig": {
          "description": "Checks Site Eligibility and creates a new Sheltie Config for the site.\n\n    Args:\n      request: SiteEligibilityRequest - Info about the site's sheltie config.\n\n    Returns:\n      Creates new Sheltie config for site if Site Eligibility satisfied and\n      returns SiteEligibilityResponse message with all info.\n      or returns details as which eligibility criteria is not met.\n\n    ",
          "httpMethod": "POST",
          "id": "content.sheltieconfig.createSheltieConfig",
          "path": "sheltie-configs/setup",
          "request": {
            "$ref": "SiteEligibilityRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "SiteEligibilityResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getSheltieConfig": {
          "description": "Gets existing Sheltie Configuration from Config file.",
          "httpMethod": "POST",
          "id": "content.sheltieconfig.getSheltieConfig",
          "path": "sheltie-config",
          "request": {
            "$ref": "GetSheltieConfigRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "GetSheltieConfigResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateSheltieConfig": {
          "description": "Updates an existing Sheltie Configuration..",
          "httpMethod": "POST",
          "id": "content.sheltieconfig.updateSheltieConfig",
          "path": "sheltie-configs/update",
          "request": {
            "$ref": "UpdateSheltieConfigRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "UpdateSheltieConfigResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "support_tools_services": {
      "methods": {
        "allowServiceAccount": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.allowServiceAccount",
          "path": "support_tools_services/AllowServiceAccount",
          "request": {
            "$ref": "AllowServiceAccountRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "AllowServiceAccountResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "baselineGitRepoAuditFailures": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.baselineGitRepoAuditFailures",
          "path": "support_tools_services/Baseline",
          "request": {
            "$ref": "BaselineGitRepoAuditFailuresRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "BaselineGitRepoAuditFailuresResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "examineNestedMetadata": {
          "description": "Implement the method from playbook.",
          "httpMethod": "POST",
          "id": "content.support_tools_services.examineNestedMetadata",
          "path": "support_tools_services/ExamineNestedMetadata",
          "request": {
            "$ref": "ExamineNestedMetadataRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ExamineNestedMetadataResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "fixNestedMetadata": {
          "description": "Implement the method from playbook.",
          "httpMethod": "POST",
          "id": "content.support_tools_services.fixNestedMetadata",
          "path": "support_tools_services/FixNestedMetadata",
          "request": {
            "$ref": "FixNestedMetadataRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "FixNestedMetadataResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "legacyUIViewer": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.legacyUIViewer",
          "path": "support_tools_services/LegacyUIViewer",
          "request": {
            "$ref": "LegacyUIViewerRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "LegacyUIViewerResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listBackups": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.listBackups",
          "path": "support_tools_services/ListBackups",
          "request": {
            "$ref": "ListBackupsRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ListBackupsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "removeServiceAccount": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.removeServiceAccount",
          "path": "support_tools_services/RemoveServiceAccount",
          "request": {
            "$ref": "AllowServiceAccountRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "AllowServiceAccountResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unlockQueueEntry": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.unlockQueueEntry",
          "path": "support_tools_services/UnlockQueueEntry",
          "request": {
            "$ref": "UnlockQueueEntryRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "UnlockQueueEntryResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "validateBracketFailure": {
          "httpMethod": "POST",
          "id": "content.support_tools_services.validateBracketFailure",
          "path": "support_tools_services/ValidateGitRepoSourceProvenance",
          "request": {
            "$ref": "ValidateGitRepoSourceProvenanceRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ValidateGitRepoSourceProvenanceResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "sync": {
      "methods": {
        "syncCollectionRef": {
          "httpMethod": "POST",
          "id": "content.sync.syncCollectionRef",
          "path": "sync/sync-collection-ref",
          "request": {
            "$ref": "SyncCollectionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "SyncCollectionResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "translations": {
      "methods": {
        "addToGttAcl": {
          "description": "Adds a user to the ACL of a GTT document.",
          "httpMethod": "POST",
          "id": "content.translations.addToGttAcl",
          "path": "translations/add_to_gtt_acl",
          "request": {
            "$ref": "AddToGttAclRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "createTranslationRequest": {
          "description": "Creates a TranslationRequest.",
          "httpMethod": "POST",
          "id": "content.translations.createTranslationRequest",
          "path": "translations/create_translation_request",
          "request": {
            "$ref": "TranslationRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "TranslationRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getLazarusProductDetails": {
          "description": "Gets locales supported by a Lazarus product.",
          "httpMethod": "POST",
          "id": "content.translations.getLazarusProductDetails",
          "path": "translations/lazarus_product",
          "request": {
            "$ref": "LazarusProductDetailsRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "LazarusProduct"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getLazarusProducts": {
          "description": "Gets Lazarus products, including supported languages.",
          "httpMethod": "POST",
          "id": "content.translations.getLazarusProducts",
          "path": "translations/lazarus_products",
          "request": {
            "$ref": "LazarusProductsGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "LazarusProducts"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getTranslationRequest": {
          "description": "Gets a translation request for a repo by request ID.",
          "httpMethod": "POST",
          "id": "content.translations.getTranslationRequest",
          "path": "translations/translation_request",
          "request": {
            "$ref": "TranslationRequestGetRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "TranslationRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listTranslationRequests": {
          "description": "Gets a list of translation requests for a repo.",
          "httpMethod": "POST",
          "id": "content.translations.listTranslationRequests",
          "path": "translations/translation_requests",
          "request": {
            "$ref": "TranslationRequestListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "TranslationRequestList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "scopedReimport": {
          "description": "Requests a scoped reimport of a translation request.",
          "httpMethod": "POST",
          "id": "content.translations.scopedReimport",
          "path": "translations/scoped_reimport",
          "request": {
            "$ref": "ScopedReimportRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateTranslationRequest": {
          "description": "Updates a TranslationRequest.",
          "httpMethod": "POST",
          "id": "content.translations.updateTranslationRequest",
          "path": "translations/update_translation_request",
          "request": {
            "$ref": "TranslationRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "TranslationRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    }
  },
  "rootUrl": "https://kintaro-content-server.appspot.com/_ah/api/",
  "schemas": {
    "ActivePushReference": {
      "id": "ActivePushReference",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "push_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddToGttAclRequest": {
      "id": "AddToGttAclRequest",
      "properties": {
        "gtt_document_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AllowServiceAccountRequest": {
      "id": "AllowServiceAccountRequest",
      "properties": {
        "email_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AllowServiceAccountResponse": {
      "id": "AllowServiceAccountResponse",
      "properties": {
        "err_msg": {
          "type": "string"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApplyMergesResponse": {
      "id": "ApplyMergesResponse",
      "properties": {
        "channel_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApprovalsCoverage": {
      "id": "ApprovalsCoverage",
      "properties": {
        "coverage_type": {
          "enum": [
            "UNKNOWN_TYPE",
            "NO_APPROVALS_NEEDED",
            "APPROVALS_COVERAGE_INSUFFICIENT",
            "APPROVALS_COVERAGE_SUFFICIENT",
            "APPROVALS_COVERAGE_ERROR"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "missing_groups": {
          "items": {
            "$ref": "MissingGroup"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ApproveContentPushResponse": {
      "id": "ApproveContentPushResponse",
      "properties": {
        "push": {
          "$ref": "ContentPush"
        }
      },
      "type": "object"
    },
    "BaselineGitRepoAuditFailuresRequest": {
      "id": "BaselineGitRepoAuditFailuresRequest",
      "properties": {
        "branch": {
          "type": "string"
        },
        "commit_id": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "project": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BaselineGitRepoAuditFailuresResponse": {
      "id": "BaselineGitRepoAuditFailuresResponse",
      "properties": {
        "err_msg": {
          "type": "string"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "BaselinedFailuresMap": {
      "id": "BaselinedFailuresMap",
      "properties": {
        "commit": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BranchAction": {
      "id": "BranchAction",
      "properties": {
        "origin_key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BranchFrom": {
      "id": "BranchFrom",
      "properties": {
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BranchSearchRequest": {
      "id": "BranchSearchRequest",
      "properties": {
        "collections": {
          "items": {
            "$ref": "CollectionHeader"
          },
          "type": "array"
        },
        "cursors": {
          "items": {
            "$ref": "SerializedCursor"
          },
          "type": "array"
        },
        "document_ids": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        },
        "exact_match": {
          "type": "boolean"
        },
        "limit": {
          "default": "25",
          "format": "int32",
          "type": "integer"
        },
        "project_id": {
          "type": "string"
        },
        "query_string": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BranchSearchResult": {
      "id": "BranchSearchResult",
      "properties": {
        "cursors": {
          "items": {
            "$ref": "SerializedCursor"
          },
          "type": "array"
        },
        "results": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CUJStateRecordRequest": {
      "id": "CUJStateRecordRequest",
      "properties": {
        "cuj_state": {
          "enum": [
            "UNKNOWN_STATE",
            "DIFF_STARTED",
            "DIFF_ENDED",
            "MERGE_STARTED",
            "MERGE_ENDED"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CancelPushRequest": {
      "id": "CancelPushRequest",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "push_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChewtoyDryRunRequest": {
      "id": "ChewtoyDryRunRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChewtoyDryRunResponse": {
      "id": "ChewtoyDryRunResponse",
      "properties": {
        "check_result": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Collection": {
      "id": "Collection",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "db_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "folder": {
          "type": "string"
        },
        "has_pending_operations": {
          "type": "boolean"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "num_documents": {
          "format": "int32",
          "type": "integer"
        },
        "num_out_of_sync_documents": {
          "format": "int32",
          "type": "integer"
        },
        "published_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "repo_id": {
          "type": "string"
        },
        "schema": {
          "$ref": "ContentSchema"
        },
        "schema_id": {
          "type": "string"
        },
        "total_document_count": {
          "format": "int64",
          "type": "string"
        },
        "updated_collection_id": {
          "type": "string"
        },
        "visibilities": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CollectionGetRequest": {
      "id": "CollectionGetRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "include_document_count": {
          "type": "boolean"
        },
        "include_schema": {
          "type": "boolean"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionHeader": {
      "id": "CollectionHeader",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionInfo": {
      "id": "CollectionInfo",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "folder": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionList": {
      "id": "CollectionList",
      "properties": {
        "collections": {
          "items": {
            "$ref": "Collection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CollectionListRequest": {
      "id": "CollectionListRequest",
      "properties": {
        "include_schema": {
          "type": "boolean"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionMap": {
      "id": "CollectionMap",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_ids": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CollectionMergeInfo": {
      "id": "CollectionMergeInfo",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "conflict_count": {
          "format": "int32",
          "type": "integer"
        },
        "document_merges": {
          "items": {
            "$ref": "DocumentMergeInfo"
          },
          "type": "array"
        },
        "issue_count": {
          "format": "int32",
          "type": "integer"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "repo_id": {
          "type": "string"
        },
        "root_locale": {
          "type": "string"
        },
        "schema": {
          "$ref": "ContentSchema"
        },
        "source_update_count": {
          "format": "int32",
          "type": "integer"
        },
        "target_update_count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CollectionReadinessUpdate": {
      "id": "CollectionReadinessUpdate",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "translation_readiness": {
          "enum": [
            "UNKNOWN_TRANSLATION_READINESS",
            "NOT_READY_FOR_TRANSLATION",
            "READY_FOR_TRANSLATION"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionResetResponse": {
      "id": "CollectionResetResponse",
      "properties": {
        "index_id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "refresh_sync_id": {
          "type": "string"
        },
        "status": {
          "enum": [
            "RESET_UNKNOWN",
            "RESET_SUCCESS",
            "RESET_FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "version": {
          "$ref": "CollectionVersion"
        }
      },
      "type": "object"
    },
    "CollectionTranslationReadinessUpdate": {
      "id": "CollectionTranslationReadinessUpdate",
      "properties": {
        "updates": {
          "items": {
            "$ref": "CollectionReadinessUpdate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CollectionUpdateAction": {
      "id": "CollectionUpdateAction",
      "properties": {
        "branch_action": {
          "$ref": "BranchAction"
        },
        "document_actions": {
          "$ref": "DocumentActionList"
        },
        "internal_action": {
          "enum": [
            "UNKNOWN_INTERNAL_ACTION",
            "INDEXING",
            "LOCALE_SYNC",
            "MIGRATION"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "merge_action": {
          "$ref": "MergeAction"
        },
        "publish_action": {
          "$ref": "PublishAction"
        },
        "reset_action": {
          "$ref": "ResetAction"
        },
        "sync_action": {
          "$ref": "SyncAction"
        },
        "timestamp": {
          "format": "int64",
          "type": "string"
        },
        "translation_import_action": {
          "$ref": "TranslationImportAction"
        }
      },
      "type": "object"
    },
    "CollectionUsageRequest": {
      "id": "CollectionUsageRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionUsageResponse": {
      "id": "CollectionUsageResponse",
      "properties": {
        "published_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "total_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "total_project_count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CollectionVersion": {
      "id": "CollectionVersion",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "history_id": {
          "type": "string"
        },
        "is_current_version": {
          "type": "boolean"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentBundle": {
      "id": "ContentBundle",
      "properties": {
        "contents": {
          "items": {
            "$ref": "DocumentContent"
          },
          "type": "array"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentField": {
      "id": "ContentField",
      "properties": {
        "field_name": {
          "type": "string"
        },
        "field_values": {
          "items": {
            "$ref": "FieldValue"
          },
          "type": "array"
        },
        "nested_field_values": {
          "items": {
            "$ref": "NestedFieldValue"
          },
          "type": "array"
        },
        "repeated": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ContentPush": {
      "id": "ContentPush",
      "properties": {
        "approved_by": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "assigned_approvers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cced_to": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "chewtoy_cl_number": {
          "format": "int64",
          "type": "string"
        },
        "cl_approvals": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cl_link": {
          "type": "string"
        },
        "cl_reviewers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "comment_link": {
          "type": "string"
        },
        "created_on": {
          "format": "int32",
          "type": "integer"
        },
        "last_updated_on": {
          "format": "int32",
          "type": "integer"
        },
        "preview_reference": {
          "$ref": "ContentPushPreviewReference"
        },
        "project_id": {
          "type": "string"
        },
        "push_id": {
          "type": "string"
        },
        "rapid_uri": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "request_description": {
          "type": "string"
        },
        "requested_by": {
          "type": "string"
        },
        "review_type": {
          "enum": [
            "UNKNOWN",
            "DISABLED",
            "ROBOT_REVIEW",
            "HUMAN_REVIEW"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "status": {
          "$ref": "ContentPushStatus"
        }
      },
      "type": "object"
    },
    "ContentPushGetRequest": {
      "id": "ContentPushGetRequest",
      "properties": {
        "push_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushGetResponse": {
      "id": "ContentPushGetResponse",
      "properties": {
        "preview": {
          "$ref": "ContentPushPreview"
        },
        "push": {
          "$ref": "ContentPush"
        }
      },
      "type": "object"
    },
    "ContentPushInfoRequest": {
      "id": "ContentPushInfoRequest",
      "properties": {
        "push_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushInfoResponse": {
      "id": "ContentPushInfoResponse",
      "properties": {
        "content_push": {
          "$ref": "ContentPush"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "rapid_data": {
          "$ref": "PushRapidData"
        },
        "sheltie_config": {
          "$ref": "SheltieConfiguration"
        }
      },
      "type": "object"
    },
    "ContentPushListRequest": {
      "id": "ContentPushListRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushListResponse": {
      "id": "ContentPushListResponse",
      "properties": {
        "content_pushes": {
          "items": {
            "$ref": "ContentPush"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ContentPushPreview": {
      "id": "ContentPushPreview",
      "properties": {
        "document_preview_paths": {
          "items": {
            "$ref": "DocumentPreviewPath"
          },
          "type": "array"
        },
        "modified_paths": {
          "items": {
            "$ref": "PageDiff"
          },
          "type": "array"
        },
        "new_paths": {
          "items": {
            "$ref": "PageDiff"
          },
          "type": "array"
        },
        "preview_key": {
          "type": "string"
        },
        "preview_root": {
          "type": "string"
        },
        "production_domain": {
          "type": "string"
        },
        "publish_preview": {
          "$ref": "PublishPreviewInfo"
        },
        "truncated": {
          "type": "boolean"
        },
        "unchanged_paths": {
          "items": {
            "$ref": "PageDiff"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ContentPushPreviewReference": {
      "id": "ContentPushPreviewReference",
      "properties": {
        "preview_key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushPreviewRequest": {
      "id": "ContentPushPreviewRequest",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushRequest": {
      "id": "ContentPushRequest",
      "properties": {
        "approver_emails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cc_emails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "ignore_copyright": {
          "type": "boolean"
        },
        "preview_key": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushResponse": {
      "id": "ContentPushResponse",
      "properties": {
        "push_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentPushStatus": {
      "id": "ContentPushStatus",
      "properties": {
        "status": {
          "enum": [
            "UNKNOWN_STATUS",
            "PENDING_APPROVAL",
            "INITIALIZING",
            "BUILDING",
            "IN_ROBOT_REVIEW",
            "IN_HUMAN_REVIEW",
            "FAILED",
            "WAITING_TO_GO_LIVE",
            "COMPLETE",
            "ABORTED",
            "REJECTED"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentSchema": {
      "id": "ContentSchema",
      "properties": {
        "db_id": {
          "type": "string"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "name": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "schema_fields": {
          "items": {
            "$ref": "SchemaField"
          },
          "type": "array"
        },
        "updated_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentSchemaList": {
      "id": "ContentSchemaList",
      "properties": {
        "schemas": {
          "items": {
            "$ref": "ContentSchema"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CreateOptions": {
      "id": "CreateOptions",
      "properties": {
        "branch_from": {
          "$ref": "BranchFrom"
        }
      },
      "type": "object"
    },
    "DiffCollectionRequest": {
      "id": "DiffCollectionRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiffCollectionResponse": {
      "id": "DiffCollectionResponse",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "doc_diffs": {
          "items": {
            "$ref": "DocDiffHeader"
          },
          "type": "array"
        },
        "new_in_source_docs": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "new_in_target_docs": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "repo_id": {
          "type": "string"
        },
        "source_updated_on_millis": {
          "format": "int64",
          "type": "string"
        },
        "target_updated_on_millis": {
          "format": "int64",
          "type": "string"
        },
        "technical_target_update_docs": {
          "items": {
            "$ref": "DocDiffHeader"
          },
          "type": "array"
        },
        "total_diffed": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DiffDocumentsRequest": {
      "id": "DiffDocumentsRequest",
      "properties": {
        "always_add_root_locale": {
          "type": "boolean"
        },
        "collection_id": {
          "type": "string"
        },
        "document_ids": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DiffDocumentsResponse": {
      "id": "DiffDocumentsResponse",
      "properties": {
        "document_merges": {
          "items": {
            "$ref": "DocumentMergeInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DiffLatencyRecordRequest": {
      "id": "DiffLatencyRecordRequest",
      "properties": {
        "diff_latency": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocDiffHeader": {
      "id": "DocDiffHeader",
      "properties": {
        "diff_headers": {
          "items": {
            "$ref": "FieldDiffHeader"
          },
          "type": "array"
        },
        "document": {
          "$ref": "DocumentHeader"
        },
        "target_snapshot_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Document": {
      "id": "Document",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "content": {
          "$ref": "DocumentContent"
        },
        "content_json": {
          "type": "string"
        },
        "descriptors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "document_state": {
          "enum": [
            "UNKNOWN_DOCUMENT_STATE",
            "PUBLISHED",
            "STAGING",
            "DRAFT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "metadata_json": {
          "type": "string"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "nested_metadata_json": {
          "type": "string"
        },
        "never_published": {
          "type": "boolean"
        },
        "out_of_sync_locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "publish_mod_info": {
          "$ref": "ModInfo"
        },
        "repo_id": {
          "type": "string"
        },
        "schema": {
          "$ref": "ContentSchema"
        },
        "schema_id": {
          "type": "string"
        },
        "snapshot_locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "translation_locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "translation_readiness": {
          "enum": [
            "UNKNOWN_TRANSLATION_READINESS",
            "NOT_READY_FOR_TRANSLATION",
            "READY_FOR_TRANSLATION"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "translations_up_to_date": {
          "type": "boolean"
        },
        "validation_json": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentAction": {
      "id": "DocumentAction",
      "properties": {
        "action_type": {
          "enum": [
            "UNKNOWN_ACTION_TYPE",
            "CREATE",
            "EDIT",
            "DELETE",
            "REVERT",
            "NUKE",
            "UPDATE_METADATA"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentActionList": {
      "id": "DocumentActionList",
      "properties": {
        "actions": {
          "items": {
            "$ref": "DocumentAction"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocumentContent": {
      "id": "DocumentContent",
      "properties": {
        "fields": {
          "items": {
            "$ref": "ContentField"
          },
          "type": "array"
        },
        "locale": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentCopyRequest": {
      "id": "DocumentCopyRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentCreateRequest": {
      "id": "DocumentCreateRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "contents": {
          "items": {
            "$ref": "DocumentContent"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "use_json": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentDeleteRequest": {
      "id": "DocumentDeleteRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentGetRequest": {
      "id": "DocumentGetRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "depth": {
          "format": "int32",
          "type": "integer"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "field_mask": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "include_schema": {
          "type": "boolean"
        },
        "include_translation_status": {
          "default": "true",
          "type": "boolean"
        },
        "include_validation_errors": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "use_json": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DocumentHeader": {
      "id": "DocumentHeader",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "document_state": {
          "enum": [
            "UNKNOWN_DOCUMENT_STATE",
            "PUBLISHED",
            "STAGING",
            "DRAFT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "snapshot_id": {
          "format": "int64",
          "type": "string"
        },
        "translation_readiness": {
          "enum": [
            "UNKNOWN_TRANSLATION_READINESS",
            "NOT_READY_FOR_TRANSLATION",
            "READY_FOR_TRANSLATION"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentHeaderList": {
      "id": "DocumentHeaderList",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "headers": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentHeaderListRequest": {
      "id": "DocumentHeaderListRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "type": "string"
        },
        "offset": {
          "format": "int64",
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentList": {
      "id": "DocumentList",
      "properties": {
        "documents": {
          "items": {
            "$ref": "Document"
          },
          "type": "array"
        },
        "metadata": {
          "items": {
            "$ref": "Metadata"
          },
          "type": "array"
        },
        "total_documents": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DocumentMergeAction": {
      "id": "DocumentMergeAction",
      "properties": {
        "actions": {
          "items": {
            "$ref": "PropertyMergeAction"
          },
          "type": "array"
        },
        "document_header": {
          "$ref": "DocumentHeader"
        },
        "set_merge_parent": {
          "type": "boolean"
        },
        "target_snapshot_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentMergeInfo": {
      "id": "DocumentMergeInfo",
      "properties": {
        "document_header": {
          "$ref": "DocumentHeader"
        },
        "is_technical_target_updated": {
          "type": "boolean"
        },
        "property_merges": {
          "items": {
            "$ref": "PropertyMergeInfo"
          },
          "type": "array"
        },
        "source_updated_on_millis": {
          "format": "int64",
          "type": "string"
        },
        "target_snapshot_id": {
          "format": "int64",
          "type": "string"
        },
        "target_updated_on_millis": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentPreviewPath": {
      "id": "DocumentPreviewPath",
      "properties": {
        "key": {
          "format": "int64",
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentTranslationReadinessUpdate": {
      "id": "DocumentTranslationReadinessUpdate",
      "properties": {
        "updates": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocumentUpdateRequest": {
      "id": "DocumentUpdateRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "content": {
          "$ref": "DocumentContent"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "source": {
          "enum": [
            "UNKNOWN_SOURCE",
            "PMMX"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentVersion": {
      "id": "DocumentVersion",
      "properties": {
        "document": {
          "$ref": "Document"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "modified_locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "snapshot_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentVersionGetRequest": {
      "id": "DocumentVersionGetRequest",
      "properties": {
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "include_schema": {
          "type": "boolean"
        },
        "locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "snapshot_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DocumentVersionList": {
      "id": "DocumentVersionList",
      "properties": {
        "versions": {
          "items": {
            "$ref": "DocumentVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DocumentVersionListRequest": {
      "id": "DocumentVersionListRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "limit": {
          "default": "50",
          "format": "int32",
          "type": "integer"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExamineNestedMetadataRequest": {
      "id": "ExamineNestedMetadataRequest",
      "properties": {
        "collection_name": {
          "type": "string"
        },
        "doc_id": {
          "format": "int64",
          "type": "string"
        },
        "project_name": {
          "type": "string"
        },
        "repo_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExamineNestedMetadataResponse": {
      "id": "ExamineNestedMetadataResponse",
      "properties": {
        "examine_messages": {
          "items": {
            "$ref": "NestedMetadataMap"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "FailedEmail": {
      "id": "FailedEmail",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "enum": [
            "UNKNOWN_CAUSE",
            "EMAIL_NOT_FOUND",
            "EMAIL_NOT_A_USER"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "FieldDiffHeader": {
      "id": "FieldDiffHeader",
      "properties": {
        "diff_state": {
          "enum": [
            "UNKNOWN_STATE",
            "UNCHANGED",
            "TARGET_UPDATED",
            "SOURCE_UPDATED",
            "CONFLICT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "field_descriptor": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FieldEdit": {
      "id": "FieldEdit",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "field_descriptor": {
          "type": "string"
        },
        "field_value": {
          "$ref": "FieldValue"
        },
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FieldFilter": {
      "id": "FieldFilter",
      "properties": {
        "operator": {
          "enum": [
            "UNKNOWN",
            "EQUAL",
            "NOT_EQUAL",
            "GREATER",
            "LESS",
            "GREATER_EQUAL",
            "LESS_EQUAL",
            "CONTAINS",
            "EXACT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "search_field": {
          "$ref": "SearchField"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FieldHeader": {
      "id": "FieldHeader",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "field_descriptor": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FieldValue": {
      "id": "FieldValue",
      "properties": {
        "edit_type": {
          "enum": [
            "UNKNOWN_EDIT_TYPE",
            "LOCAL_EDIT",
            "GTT_EDIT"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "fallback_field_value": {
          "$ref": "FieldValue"
        },
        "fallback_locale": {
          "type": "string"
        },
        "fallback_nested_field_value": {
          "$ref": "NestedFieldValue"
        },
        "fallback_sync_status": {
          "enum": [
            "UNKNOWN_SYNC_STATUS",
            "OUTDATED",
            "UP_TO_DATE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "header": {
          "$ref": "FieldHeader"
        },
        "root_md5": {
          "type": "string"
        },
        "sync_status": {
          "enum": [
            "UNKNOWN_SYNC_STATUS",
            "OUTDATED",
            "UP_TO_DATE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "UNKNOWN_TYPE",
            "STRING",
            "INT",
            "BOOL"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "value_type": {
          "enum": [
            "UNKNOWN_VALUE_TYPE",
            "LOCALE_INDEPENDENT_VALUE",
            "ROOT_VALUE",
            "TRANSLATED_VALUE",
            "LOCALE_VARIED_VALUE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "FilterExpression": {
      "id": "FilterExpression",
      "properties": {
        "expressions": {
          "items": {
            "$ref": "FilterExpression"
          },
          "type": "array"
        },
        "field_filter": {
          "$ref": "FieldFilter"
        },
        "join_method": {
          "enum": [
            "UNKNOWN",
            "AND",
            "OR"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "FindDocumentMergesRequest": {
      "id": "FindDocumentMergesRequest",
      "properties": {
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FindMergesResponse": {
      "id": "FindMergesResponse",
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "project_merge_info": {
          "$ref": "ProjectMergeInfo"
        }
      },
      "type": "object"
    },
    "FindMultiDocumentMergesRequest": {
      "id": "FindMultiDocumentMergesRequest",
      "properties": {
        "headers": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "target_project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FixNestedMetadataRequest": {
      "id": "FixNestedMetadataRequest",
      "properties": {
        "backup_id": {
          "type": "string"
        },
        "collection_id": {
          "type": "string"
        },
        "doc_id": {
          "format": "int64",
          "type": "string"
        },
        "fix_type": {
          "enum": [
            "UNSPECIFIED",
            "LOCALES",
            "LAST_SNAPSHOT",
            "BACKUPID"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FixNestedMetadataResponse": {
      "id": "FixNestedMetadataResponse",
      "properties": {
        "err_msg": {
          "type": "string"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetCustomTokenRequest": {
      "id": "GetCustomTokenRequest",
      "properties": {
        "channel_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetCustomTokenResponse": {
      "id": "GetCustomTokenResponse",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetFieldsByDescriptorRequest": {
      "id": "GetFieldsByDescriptorRequest",
      "properties": {
        "field_headers": {
          "items": {
            "$ref": "FieldHeader"
          },
          "type": "array"
        },
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        }
      },
      "type": "object"
    },
    "GetFieldsByDescriptorResponse": {
      "id": "GetFieldsByDescriptorResponse",
      "properties": {
        "field_values": {
          "items": {
            "$ref": "FieldValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetSheltieConfigRequest": {
      "id": "GetSheltieConfigRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetSheltieConfigResponse": {
      "id": "GetSheltieConfigResponse",
      "properties": {
        "sheltie_config": {
          "$ref": "SheltieConfiguration"
        }
      },
      "type": "object"
    },
    "GoroClientOptions": {
      "id": "GoroClientOptions",
      "properties": {
        "delegated_for": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GttDocument": {
      "id": "GttDocument",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "first_import_time": {
          "format": "int32",
          "type": "integer"
        },
        "gtt_document_id": {
          "type": "string"
        },
        "gtt_document_status": {
          "enum": [
            "UNKNOWN_STATUS",
            "NEW",
            "IN_GTT",
            "READY_TO_IMPORT",
            "IMPORTING",
            "IMPORTED",
            "IMPORTED_WITH_ERRORS",
            "ERROR",
            "CANCELED"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "gtt_url": {
          "type": "string"
        },
        "kcs_document_headers": {
          "items": {
            "$ref": "LightDocumentHeader"
          },
          "type": "array"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "part_index": {
          "default": "1",
          "format": "int32",
          "type": "integer"
        },
        "repo_id": {
          "type": "string"
        },
        "target_language": {
          "type": "string"
        },
        "total_parts": {
          "default": "1",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "IdNameConverterRequest": {
      "id": "IdNameConverterRequest",
      "properties": {
        "json_string": {
          "type": "string"
        },
        "mode": {
          "enum": [
            "UNKNOWN_MODE",
            "ID_TO_NAME",
            "NAME_TO_ID"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdNameConverterResponse": {
      "id": "IdNameConverterResponse",
      "properties": {
        "json_string": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImportIssue": {
      "id": "ImportIssue",
      "properties": {
        "archived": {
          "type": "boolean"
        },
        "collection_name": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "exception_name": {
          "type": "string"
        },
        "field_descriptor": {
          "type": "string"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        },
        "object_type": {
          "enum": [
            "UNKNOWN_IMPORT_ISSUE_OBJECT_TYPE",
            "REPO",
            "PROJECT",
            "COLLECTION",
            "PART",
            "DOCUMENT",
            "FIELD"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "part_index": {
          "format": "int32",
          "type": "integer"
        },
        "project_name": {
          "type": "string"
        },
        "repo_name": {
          "type": "string"
        },
        "severity": {
          "enum": [
            "UNKNOWN_IMPORT_ISSUE_SEVERITY",
            "WARNING",
            "ERROR"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "LazarusProduct": {
      "id": "LazarusProduct",
      "properties": {
        "languages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "product_id": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LazarusProductDetailsRequest": {
      "id": "LazarusProductDetailsRequest",
      "properties": {
        "product_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LazarusProducts": {
      "id": "LazarusProducts",
      "properties": {
        "products": {
          "items": {
            "$ref": "LazarusProduct"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LazarusProductsGetRequest": {
      "id": "LazarusProductsGetRequest",
      "properties": {
        "return_languages": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LegacyUIViewerAction": {
      "id": "LegacyUIViewerAction",
      "properties": {
        "email": {
          "type": "string"
        },
        "expiration_time_millis": {
          "format": "int64",
          "type": "string"
        },
        "type": {
          "enum": [
            "UNDEFINED",
            "ADD",
            "REMOVE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "LegacyUIViewerRequest": {
      "id": "LegacyUIViewerRequest",
      "properties": {
        "actions": {
          "items": {
            "$ref": "LegacyUIViewerAction"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LegacyUIViewerResponse": {
      "id": "LegacyUIViewerResponse",
      "properties": {
        "results": {
          "items": {
            "$ref": "LegacyUIViewerResponseRow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LegacyUIViewerResponseRow": {
      "id": "LegacyUIViewerResponseRow",
      "properties": {
        "action": {
          "$ref": "LegacyUIViewerAction"
        },
        "error_message": {
          "type": "string"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "LightDocumentHeader": {
      "id": "LightDocumentHeader",
      "properties": {
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListBackupsRequest": {
      "id": "ListBackupsRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "doc_id": {
          "format": "int64",
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListBackupsResponse": {
      "id": "ListBackupsResponse",
      "properties": {
        "backup_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "err_msg": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocaleContentCopyRequest": {
      "id": "LocaleContentCopyRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "from_locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "to_locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "LocaleInfo": {
      "id": "LocaleInfo",
      "properties": {
        "default_geo_lang_code": {
          "type": "string"
        },
        "geo_code": {
          "type": "string"
        },
        "geo_name": {
          "type": "string"
        },
        "lang_code": {
          "type": "string"
        },
        "lang_is_rtl": {
          "type": "boolean"
        },
        "lang_name": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LocaleInfoResponse": {
      "id": "LocaleInfoResponse",
      "properties": {
        "locales_info": {
          "items": {
            "$ref": "LocaleInfo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MergeAction": {
      "id": "MergeAction",
      "properties": {
        "merged_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "new_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "target_branch_key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MergeLatencyRecordRequest": {
      "id": "MergeLatencyRecordRequest",
      "properties": {
        "merge_latency": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Metadata": {
      "id": "Metadata",
      "properties": {
        "key": {
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MissingGroup": {
      "id": "MissingGroup",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ModInfo": {
      "id": "ModInfo",
      "properties": {
        "created_by": {
          "type": "string"
        },
        "created_on_millis": {
          "format": "int64",
          "type": "string"
        },
        "updated_by": {
          "type": "string"
        },
        "updated_on_millis": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultiDocumentCreateRequest": {
      "id": "MultiDocumentCreateRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "create_requests": {
          "items": {
            "$ref": "DocumentCreateRequest"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MultiDocumentUpdateRequest": {
      "id": "MultiDocumentUpdateRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "updated_content": {
          "items": {
            "$ref": "ContentBundle"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MultiTranslationReadinessUpdateRequest": {
      "id": "MultiTranslationReadinessUpdateRequest",
      "properties": {
        "collection_update": {
          "$ref": "CollectionTranslationReadinessUpdate"
        },
        "document_update": {
          "$ref": "DocumentTranslationReadinessUpdate"
        },
        "project_id": {
          "type": "string"
        },
        "project_readiness": {
          "enum": [
            "UNKNOWN_TRANSLATION_READINESS",
            "NOT_READY_FOR_TRANSLATION",
            "READY_FOR_TRANSLATION"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NestedFieldMetadata": {
      "id": "NestedFieldMetadata",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "uuid_provenance": {
          "enum": [
            "UNKNOWN_PROVENANCE",
            "USER_CONFIRMED",
            "BACKEND_BACKFILLED"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "NestedFieldValue": {
      "id": "NestedFieldValue",
      "properties": {
        "fields": {
          "items": {
            "$ref": "ContentField"
          },
          "type": "array"
        },
        "nested_metadata": {
          "$ref": "NestedFieldMetadata"
        }
      },
      "type": "object"
    },
    "NestedMetadataMap": {
      "id": "NestedMetadataMap",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NukeCollectionRequest": {
      "id": "NukeCollectionRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NukeDocumentRequest": {
      "id": "NukeDocumentRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NukeMultiDocumentRequest": {
      "id": "NukeMultiDocumentRequest",
      "properties": {
        "collection_map": {
          "items": {
            "$ref": "CollectionMap"
          },
          "type": "array"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PageDiff": {
      "id": "PageDiff",
      "properties": {
        "desktop_screendiff": {
          "$ref": "ScreenDiff"
        },
        "laptop_screendiff": {
          "$ref": "ScreenDiff"
        },
        "mobile_screendiff": {
          "$ref": "ScreenDiff"
        },
        "page_label": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "tablet_screendiff": {
          "$ref": "ScreenDiff"
        }
      },
      "type": "object"
    },
    "PathInfo": {
      "id": "PathInfo",
      "properties": {
        "field_type": {
          "enum": [
            "UNKNOWN_FIELD_TYPE",
            "UNLOCALIZED",
            "LOCALE_VARIED",
            "TRANSLATABLE",
            "LOCALE_VARIED_TRANSLATABLE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Permission": {
      "id": "Permission",
      "properties": {
        "email": {
          "type": "string"
        },
        "email_type": {
          "enum": [
            "UNKNOWN_EMAIL_TYPE",
            "INDIVIDUAL",
            "GGG",
            "GANPATI"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "object_id": {
          "type": "string"
        },
        "object_type": {
          "enum": [
            "UNKNOWN_OBJECT_TYPE",
            "GLOBAL",
            "PROJECT",
            "REPO"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "relation": {
          "enum": [
            "UNKNOWN_RELATION",
            "KINTARO_USER",
            "KINTARO_ADMIN",
            "KINTARO_REPO_CREATOR",
            "REPO_OWNER",
            "REPO_USER_MANAGER",
            "REPO_ARCHITECT",
            "REPO_VIEWER",
            "PROJECT_OWNER",
            "PROJECT_DOC_WRITER",
            "PROJECT_VIEWER",
            "PROJECT_TRANSLATION_WRITER",
            "ACTION_READ_DOCUMENT",
            "SITE_DOC_WRITER",
            "SITE_TRANSLATION_WRITER",
            "SITE_PUBLISHER",
            "ACTION_PUBLISH_PROJECT",
            "ACTION_READ_PROJECT",
            "ACTION_READ_REPO",
            "PROJECT_TRANSLATION_VENDOR"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PermissionCheckResponse": {
      "id": "PermissionCheckResponse",
      "properties": {
        "has_permission": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PermissionList": {
      "id": "PermissionList",
      "properties": {
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "permissions": {
          "items": {
            "$ref": "Permission"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PermissionsUpdateRequest": {
      "id": "PermissionsUpdateRequest",
      "properties": {
        "object_id": {
          "type": "string"
        },
        "object_type": {
          "enum": [
            "UNKNOWN_OBJECT_TYPE",
            "GLOBAL",
            "PROJECT",
            "REPO"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "permissions": {
          "$ref": "PermissionList"
        }
      },
      "type": "object"
    },
    "PreviewEnvironment": {
      "id": "PreviewEnvironment",
      "properties": {
        "appid": {
          "type": "string"
        },
        "appversion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "root_path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Project": {
      "id": "Project",
      "properties": {
        "allowed_operations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "archived": {
          "type": "boolean"
        },
        "content_last_modified_by": {
          "type": "string"
        },
        "content_last_modified_on": {
          "format": "int64",
          "type": "string"
        },
        "create_options": {
          "$ref": "CreateOptions"
        },
        "db_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "document_count": {
          "format": "int32",
          "type": "integer"
        },
        "launch_date_millis": {
          "format": "int64",
          "type": "string"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "out_of_sync_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "owners": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "permissions": {
          "$ref": "PermissionList"
        },
        "pmmx": {
          "type": "boolean"
        },
        "project_id": {
          "type": "string"
        },
        "project_locales_source": {
          "enum": [
            "UNKNOWN_PROJECT_LOCALES_SOURCE",
            "PROJECT",
            "REPO"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "repo_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "translation_ready_and_out_of_sync_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "translation_ready_document_count": {
          "format": "int32",
          "type": "integer"
        },
        "translations_up_to_date": {
          "type": "boolean"
        },
        "updated_project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectDocumentHeaderListRequest": {
      "id": "ProjectDocumentHeaderListRequest",
      "properties": {
        "out_of_sync_only": {
          "type": "boolean"
        },
        "project_id": {
          "type": "string"
        },
        "ready_for_translation_only": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProjectGetRequest": {
      "id": "ProjectGetRequest",
      "properties": {
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "include_content_last_modified": {
          "type": "boolean"
        },
        "include_document_counts": {
          "type": "boolean"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectHistoryAction": {
      "id": "ProjectHistoryAction",
      "properties": {
        "action": {
          "$ref": "CollectionUpdateAction"
        },
        "modified_by": {
          "type": "string"
        },
        "version": {
          "$ref": "CollectionVersion"
        }
      },
      "type": "object"
    },
    "ProjectHistoryListRequest": {
      "id": "ProjectHistoryListRequest",
      "properties": {
        "collections": {
          "items": {
            "$ref": "CollectionHeader"
          },
          "type": "array"
        },
        "limit": {
          "default": "50",
          "format": "int64",
          "type": "string"
        },
        "offset": {
          "format": "int64",
          "type": "string"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectHistoryListResponse": {
      "id": "ProjectHistoryListResponse",
      "properties": {
        "actions": {
          "items": {
            "$ref": "ProjectHistoryAction"
          },
          "type": "array"
        },
        "mod_timestamp": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectList": {
      "id": "ProjectList",
      "properties": {
        "projects": {
          "items": {
            "$ref": "Project"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProjectListRequest": {
      "id": "ProjectListRequest",
      "properties": {
        "include_archived": {
          "type": "boolean"
        },
        "include_owners": {
          "type": "boolean"
        },
        "permission": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "reverse_order": {
          "type": "boolean"
        },
        "sort_by": {
          "default": "project_id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectMergeAction": {
      "id": "ProjectMergeAction",
      "properties": {
        "actions": {
          "items": {
            "$ref": "DocumentMergeAction"
          },
          "type": "array"
        },
        "defer": {
          "default": "true",
          "type": "boolean"
        },
        "project_id": {
          "type": "string"
        },
        "skip_collection_ref_update": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProjectMergeInfo": {
      "id": "ProjectMergeInfo",
      "properties": {
        "collection_merges": {
          "items": {
            "$ref": "CollectionMergeInfo"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectResetRequest": {
      "id": "ProjectResetRequest",
      "properties": {
        "mod_timestamp": {
          "format": "int64",
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "reset_type": {
          "enum": [
            "UNKNOWN_RESET_TYPE",
            "HARD"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        },
        "versions": {
          "items": {
            "$ref": "CollectionVersion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ProjectResetResponse": {
      "id": "ProjectResetResponse",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "response": {
          "items": {
            "$ref": "CollectionResetResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PropertyMergeAction": {
      "id": "PropertyMergeAction",
      "properties": {
        "accepted_value": {
          "$ref": "ContentField"
        },
        "accepted_version": {
          "enum": [
            "UNKNOWN_VERSION",
            "TARGET",
            "SOURCE",
            "UPDATE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "field_name": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PropertyMergeInfo": {
      "id": "PropertyMergeInfo",
      "properties": {
        "ancestor_value": {
          "$ref": "ContentField"
        },
        "locale": {
          "type": "string"
        },
        "merge_state": {
          "enum": [
            "UNKNOWN_STATE",
            "UNCHANGED",
            "TARGET_UPDATED",
            "SOURCE_UPDATED",
            "CONFLICT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "source_value": {
          "$ref": "ContentField"
        },
        "target_value": {
          "$ref": "ContentField"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishAction": {
      "id": "PublishAction",
      "properties": {
        "branch_key": {
          "type": "string"
        },
        "document_count": {
          "format": "int32",
          "type": "integer"
        },
        "publish_record_key": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishHistory": {
      "id": "PublishHistory",
      "properties": {
        "publish_records": {
          "items": {
            "$ref": "PublishRecord"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PublishPreviewInfo": {
      "id": "PublishPreviewInfo",
      "properties": {
        "documents": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "has_merge_conflicts": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PublishPreviewRequest": {
      "id": "PublishPreviewRequest",
      "properties": {
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishRecord": {
      "id": "PublishRecord",
      "properties": {
        "documents": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "nuked_documents": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishRequest": {
      "id": "PublishRequest",
      "properties": {
        "collection_headers": {
          "items": {
            "$ref": "CollectionHeader"
          },
          "type": "array"
        },
        "documents": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "override_merge_conflict": {
          "type": "boolean"
        },
        "override_translations": {
          "type": "boolean"
        },
        "project_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishResponse": {
      "id": "PublishResponse",
      "properties": {
        "publish_records": {
          "items": {
            "$ref": "PublishRecord"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PublishStatusRequest": {
      "id": "PublishStatusRequest",
      "properties": {
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PublishStatusResponse": {
      "id": "PublishStatusResponse",
      "properties": {
        "failed": {
          "format": "int32",
          "type": "integer"
        },
        "pending": {
          "format": "int32",
          "type": "integer"
        },
        "succeeded": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PushRapidData": {
      "id": "PushRapidData",
      "properties": {
        "candidate_name": {
          "type": "string"
        },
        "candidate_state": {
          "type": "string"
        },
        "release_name": {
          "type": "string"
        },
        "release_state": {
          "type": "string"
        },
        "workflow": {
          "items": {
            "$ref": "PushRapidWorkflow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "PushRapidTask": {
      "id": "PushRapidTask",
      "properties": {
        "error": {
          "items": {
            "$ref": "TaskError"
          },
          "type": "array"
        },
        "task_label": {
          "type": "string"
        },
        "task_state": {
          "type": "string"
        },
        "task_type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PushRapidWorkflow": {
      "id": "PushRapidWorkflow",
      "properties": {
        "process_name": {
          "type": "string"
        },
        "process_state": {
          "type": "string"
        },
        "process_type": {
          "type": "string"
        },
        "task": {
          "items": {
            "$ref": "PushRapidTask"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReferenceHash": {
      "id": "ReferenceHash",
      "properties": {
        "file_path": {
          "type": "string"
        },
        "sha256_hash": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Repo": {
      "id": "Repo",
      "properties": {
        "active_push": {
          "$ref": "ActivePushReference"
        },
        "allowed_operations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "collection_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "collection_infos": {
          "items": {
            "$ref": "CollectionInfo"
          },
          "type": "array"
        },
        "collections": {
          "items": {
            "$ref": "Collection"
          },
          "type": "array"
        },
        "content_type": {
          "enum": [
            "UNKNOWN_CONTENT_TYPE",
            "LEGAL_CONTENT_TYPE",
            "MARKETING_CONTENT_TYPE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "db_id": {
          "type": "string"
        },
        "default_language": {
          "default": "en",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "diff_merge_dogfood": {
          "type": "boolean"
        },
        "lazarus_backend": {
          "enum": [
            "UNKNOWN_LAZARUS_BACKEND",
            "GTT",
            "POLYGLOT"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "lazarus_product_id": {
          "type": "string"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "permissions": {
          "$ref": "PermissionList"
        },
        "pmmx_enabled": {
          "type": "boolean"
        },
        "preview_environments": {
          "items": {
            "$ref": "PreviewEnvironment"
          },
          "type": "array"
        },
        "publish_mod_info": {
          "$ref": "ModInfo"
        },
        "recently_viewed_on": {
          "format": "int64",
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "repo_label": {
          "type": "string"
        },
        "root_locale_available": {
          "type": "boolean"
        },
        "schema_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sheltie_status": {
          "enum": [
            "UNKNOWN_SHELTIE_STATUS",
            "SHELTIE_NOT_ENABLED",
            "SHELTIE_ENABLED_INACTIVE",
            "SHELTIE_ENABLED_ACTIVE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "snapshots_locked": {
          "type": "boolean"
        },
        "staging_appid": {
          "type": "string"
        },
        "translation_request_per_language_word_limit": {
          "default": "3000",
          "format": "int32",
          "type": "integer"
        },
        "translation_request_word_limit": {
          "default": "100000",
          "format": "int32",
          "type": "integer"
        },
        "updated_repo_id": {
          "type": "string"
        },
        "visibilities": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RepoGetRequest": {
      "id": "RepoGetRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoHeader": {
      "id": "RepoHeader",
      "properties": {
        "db_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "pmmx_enabled": {
          "type": "boolean"
        },
        "private_id": {
          "type": "string"
        },
        "published_by": {
          "type": "string"
        },
        "published_on": {
          "format": "int64",
          "type": "string"
        },
        "recently_viewed_on": {
          "format": "int64",
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "repo_label": {
          "type": "string"
        },
        "updated_on": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoHeaderList": {
      "id": "RepoHeaderList",
      "properties": {
        "repo_headers": {
          "items": {
            "$ref": "RepoHeader"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RepoList": {
      "id": "RepoList",
      "properties": {
        "repos": {
          "items": {
            "$ref": "Repo"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RepoListRequest": {
      "id": "RepoListRequest",
      "properties": {
        "path_project_id": {
          "type": "string"
        },
        "return_collections": {
          "default": "true",
          "type": "boolean"
        },
        "use_cache": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RepoState": {
      "id": "RepoState",
      "properties": {
        "consistency_state": {
          "enum": [
            "UNSPECIFIED_CONSISTENCY",
            "INCONSISTENT",
            "CONSISTENT"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RepoViewRecordRequest": {
      "id": "RepoViewRecordRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResetAction": {
      "id": "ResetAction",
      "properties": {
        "history_key": {
          "type": "string"
        },
        "target_action": {
          "$ref": "CollectionUpdateAction"
        }
      },
      "type": "object"
    },
    "Resource": {
      "id": "Resource",
      "properties": {
        "file_data": {
          "format": "byte",
          "type": "string"
        },
        "metadata": {
          "items": {
            "$ref": "Metadata"
          },
          "type": "array"
        },
        "resource_path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourceCreateRequest": {
      "id": "ResourceCreateRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "file_data": {
          "format": "byte",
          "type": "string"
        },
        "file_name": {
          "type": "string"
        },
        "file_type": {
          "type": "string"
        },
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "resource_type": {
          "enum": [
            "UNKNOWN",
            "RASTER_IMAGE",
            "BLOB_FILE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResultOptions": {
      "id": "ResultOptions",
      "properties": {
        "limit": {
          "format": "int64",
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "offset": {
          "format": "int64",
          "type": "string"
        },
        "return_json": {
          "type": "boolean"
        },
        "return_schema": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RevertRequest": {
      "id": "RevertRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "version_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SchemaField": {
      "id": "SchemaField",
      "properties": {
        "can_be_locale_varied": {
          "type": "boolean"
        },
        "can_be_locale_varied_translatable": {
          "type": "boolean"
        },
        "can_be_required": {
          "type": "boolean"
        },
        "can_be_translated": {
          "type": "boolean"
        },
        "can_index": {
          "type": "boolean"
        },
        "can_index_repeated": {
          "type": "boolean"
        },
        "choices": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "collections": {
          "items": {
            "$ref": "CollectionHeader"
          },
          "type": "array"
        },
        "default": {
          "$ref": "ContentField"
        },
        "description": {
          "type": "string"
        },
        "displayed": {
          "type": "boolean"
        },
        "fallback_strategy": {
          "enum": [
            "UNKNOWN_STRATEGY",
            "OFF",
            "ROOT",
            "SCS"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "indexed": {
          "type": "boolean"
        },
        "label": {
          "type": "boolean"
        },
        "locale_varied": {
          "type": "boolean"
        },
        "locale_varied_translatable": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "path_info": {
          "$ref": "PathInfo"
        },
        "repeated": {
          "type": "boolean"
        },
        "repo_id": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "restriction": {
          "enum": [
            "UNSPECIFIED_RESTRICTION_TYPE",
            "UNRESTRICTED",
            "WEBDEVS_ONLY"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "schema_fields": {
          "items": {
            "$ref": "SchemaField"
          },
          "type": "array"
        },
        "schema_name": {
          "type": "string"
        },
        "translatable": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "validation_rule": {
          "type": "string"
        },
        "validation_rule_message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SchemaGetRequest": {
      "id": "SchemaGetRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        },
        "schema_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SchemaListRequest": {
      "id": "SchemaListRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SchemaStats": {
      "id": "SchemaStats",
      "properties": {
        "published_docs_count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ScopedReimportRequest": {
      "id": "ScopedReimportRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "document_id": {
          "format": "int64",
          "type": "string"
        },
        "field_descriptor": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "part_index": {
          "format": "int32",
          "type": "integer"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "translation_request_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ScreenDiff": {
      "id": "ScreenDiff",
      "properties": {
        "diff_gcs_path": {
          "type": "string"
        },
        "diff_image": {
          "type": "string"
        },
        "reference_gcs_path": {
          "type": "string"
        },
        "reference_image": {
          "type": "string"
        },
        "target_gcs_path": {
          "type": "string"
        },
        "target_image": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SearchField": {
      "id": "SearchField",
      "properties": {
        "meta_field": {
          "enum": [
            "UNKNOWN",
            "CREATED_BY",
            "CREATED_ON",
            "UPDATED_BY",
            "UPDATED_ON",
            "PUBLISH_TIMESTAMP",
            "DOCUMENT_STATE",
            "PERFORMANCE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "user_field": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SearchRequest": {
      "id": "SearchRequest",
      "properties": {
        "collection_id": {
          "type": "string"
        },
        "depth": {
          "format": "int64",
          "type": "string"
        },
        "field_projections": {
          "items": {
            "$ref": "SearchField"
          },
          "type": "array"
        },
        "filter": {
          "$ref": "FilterExpression"
        },
        "goro_client_options": {
          "$ref": "GoroClientOptions"
        },
        "locale": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "result_options": {
          "$ref": "ResultOptions"
        },
        "sorts": {
          "items": {
            "$ref": "Sort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SearchResult": {
      "id": "SearchResult",
      "properties": {
        "document_list": {
          "$ref": "DocumentList"
        },
        "results_returned": {
          "format": "int64",
          "type": "string"
        },
        "schema": {
          "$ref": "ContentSchema"
        },
        "schema_json": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SerializedCursor": {
      "id": "SerializedCursor",
      "properties": {
        "collection_key": {
          "type": "string"
        },
        "cursor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SheltieConfiguration": {
      "id": "SheltieConfiguration",
      "properties": {
        "app_engine_prod_app_id": {
          "type": "string"
        },
        "app_version": {
          "type": "string"
        },
        "approver_groups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "auto_archive_ws": {
          "default": "true",
          "type": "boolean"
        },
        "piper_base_path": {
          "type": "string"
        },
        "preview_appid": {
          "type": "string"
        },
        "production_environment": {
          "type": "string"
        },
        "production_url": {
          "type": "string"
        },
        "rapid_project_name": {
          "type": "string"
        },
        "rapid_robot_email": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "scs_depot": {
          "type": "string"
        },
        "send_reviews_to": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sheltie_build_workflow": {
          "default": "Default Build",
          "type": "string"
        },
        "site_publishers_can_self_approve": {
          "type": "boolean"
        },
        "source_provenance": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "webmaster_ldap": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SiteEligibilityRequest": {
      "id": "SiteEligibilityRequest",
      "properties": {
        "sheltie_site_config": {
          "$ref": "SheltieConfiguration"
        }
      },
      "type": "object"
    },
    "SiteEligibilityResponse": {
      "id": "SiteEligibilityResponse",
      "properties": {
        "app_yaml_check": {
          "$ref": "ValidationResult"
        },
        "bracket_meta_check": {
          "$ref": "ValidationResult"
        },
        "bracket_version_check": {
          "$ref": "ValidationResult"
        },
        "code_audit_check": {
          "$ref": "ValidationResult"
        },
        "configs_check": {
          "$ref": "ValidationResult"
        },
        "gcloud_ignore_check": {
          "$ref": "ValidationResult"
        },
        "mdb_owner_preview_check": {
          "$ref": "ValidationResult"
        },
        "mdb_owner_prod_check": {
          "$ref": "ValidationResult"
        },
        "scs_depot_path": {
          "$ref": "ValidationResult"
        },
        "verify_user_info": {
          "$ref": "ValidationResult"
        },
        "webmaster_owner_check": {
          "$ref": "ValidationResult"
        }
      },
      "type": "object"
    },
    "Sort": {
      "id": "Sort",
      "properties": {
        "field": {
          "$ref": "SearchField"
        },
        "order": {
          "enum": [
            "ASCENDING",
            "DESCENDING"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "SyncAction": {
      "id": "SyncAction",
      "properties": {
        "document_count": {
          "format": "int32",
          "type": "integer"
        },
        "sync_type": {
          "enum": [
            "UNKNOWN_SYNC_TYPE",
            "SYNC_NEW_DOCUMENTS",
            "TECHNICAL_UPDATE",
            "FAST_FORWARD"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "SyncCollectionRequest": {
      "id": "SyncCollectionRequest",
      "properties": {
        "auto_fast_forward": {
          "type": "boolean"
        },
        "collection_id": {
          "type": "string"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        },
        "sync_new_documents": {
          "default": "true",
          "type": "boolean"
        },
        "target_project_id": {
          "type": "string"
        },
        "technical_target_update_docs": {
          "items": {
            "$ref": "DocDiffHeader"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SyncCollectionResponse": {
      "id": "SyncCollectionResponse",
      "properties": {
        "fast_forwarded_docs": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TaskError": {
      "id": "TaskError",
      "properties": {
        "description": {
          "type": "string"
        },
        "stack_trace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TranslationImportAction": {
      "id": "TranslationImportAction",
      "properties": {
        "document_count": {
          "format": "int32",
          "type": "integer"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TranslationRequest": {
      "id": "TranslationRequest",
      "properties": {
        "all_subrequest_ids": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        },
        "cli_justification": {
          "enum": [
            "UNKNOWN_JUSTIFICATION",
            "READINESS",
            "AUTOSPLIT",
            "INCREMENTAL",
            "LOCALE_SUBSETS",
            "PERSONAL_PREFERENCE",
            "CUSTOM",
            "UNINFORMED_READINESS_USER",
            "UNINFORMED_AUTOSPLIT_USER",
            "UNINFORMED_INCREMENTAL_USER"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "content_type": {
          "enum": [
            "UNKNOWN_CONTENT_TYPE",
            "LEGAL_CONTENT_TYPE",
            "MARKETING_CONTENT_TYPE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "documents": {
          "items": {
            "$ref": "DocumentHeader"
          },
          "type": "array"
        },
        "first_full_import_timestamp": {
          "format": "int64",
          "type": "string"
        },
        "freeform_cli_justification": {
          "type": "string"
        },
        "group_uid": {
          "type": "string"
        },
        "gtt_documents": {
          "items": {
            "$ref": "GttDocument"
          },
          "type": "array"
        },
        "import_issues": {
          "items": {
            "$ref": "ImportIssue"
          },
          "type": "array"
        },
        "import_strategy": {
          "enum": [
            "UNKNOWN_IMPORT_STRATEGY",
            "OVERWRITE_ALL",
            "SKIP_LOCAL_EDITS"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "incrementation_type": {
          "enum": [
            "UNKNOWN_INCREMENTATION_TYPE",
            "NO_INCREMENTATION",
            "INCREMENT_ALL_INFLIGHT_REQUESTS_FOR_PROJECT",
            "CUSTOM_INCREMENTATION"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "incremented_translation_request_ids": {
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        },
        "kintaro_status": {
          "enum": [
            "UNKNOWN_STATUS",
            "ARCHIVED",
            "NEW",
            "IN_STRONGHOLD",
            "IN_GTT",
            "IMPORTING",
            "IMPORTED",
            "IMPORTED_WITH_ERRORS",
            "STRONGHOLD_REJECTED",
            "ERROR",
            "CANCELED",
            "SPLIT"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "lazarus_backend": {
          "enum": [
            "UNKNOWN_LAZARUS_BACKEND",
            "GTT",
            "POLYGLOT"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "lazarus_product_id": {
          "type": "string"
        },
        "locales": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mod_info": {
          "$ref": "ModInfo"
        },
        "notify_emails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "repo_ids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requester": {
          "type": "string"
        },
        "string_collection_method": {
          "enum": [
            "UNKNOWN_COLLECTION_METHOD",
            "OUT_OF_SYNC",
            "ALL",
            "TRANSLATION_READY",
            "TRANSLATION_READY_AND_OUT_OF_SYNC"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "stronghold_url": {
          "type": "string"
        },
        "subrequest_index": {
          "format": "int32",
          "type": "integer"
        },
        "target_languages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "translation_request_id": {
          "format": "int64",
          "type": "string"
        },
        "user_channel": {
          "enum": [
            "UNKNOWN_USER_CHANNEL",
            "KINTARO_UI",
            "CLI"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TranslationRequestGetRequest": {
      "id": "TranslationRequestGetRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        },
        "translation_request_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TranslationRequestList": {
      "id": "TranslationRequestList",
      "properties": {
        "translation_requests": {
          "items": {
            "$ref": "TranslationRequest"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TranslationRequestListRequest": {
      "id": "TranslationRequestListRequest",
      "properties": {
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UnApproveContentPushResponse": {
      "id": "UnApproveContentPushResponse",
      "properties": {},
      "type": "object"
    },
    "UnlockQueueEntryRequest": {
      "id": "UnlockQueueEntryRequest",
      "properties": {
        "guid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UnlockQueueEntryResponse": {
      "id": "UnlockQueueEntryResponse",
      "properties": {
        "err_msg": {
          "type": "string"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "UpdateReferenceHashesRequest": {
      "id": "UpdateReferenceHashesRequest",
      "properties": {
        "reference_hashes": {
          "items": {
            "$ref": "ReferenceHash"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateSheltieConfigRequest": {
      "id": "UpdateSheltieConfigRequest",
      "properties": {
        "sheltie_config": {
          "$ref": "SheltieConfiguration"
        }
      },
      "type": "object"
    },
    "UpdateSheltieConfigResponse": {
      "id": "UpdateSheltieConfigResponse",
      "properties": {
        "cl_number": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidateApproversRequest": {
      "id": "ValidateApproversRequest",
      "properties": {
        "approver_emails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "project_id": {
          "type": "string"
        },
        "repo_id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidateApproversResponse": {
      "id": "ValidateApproversResponse",
      "properties": {
        "approvals_coverage": {
          "$ref": "ApprovalsCoverage"
        },
        "validation_failure": {
          "$ref": "ValidationFailure"
        }
      },
      "type": "object"
    },
    "ValidateGitRepoSourceProvenanceRequest": {
      "id": "ValidateGitRepoSourceProvenanceRequest",
      "properties": {
        "branch": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "project": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidateGitRepoSourceProvenanceResponse": {
      "id": "ValidateGitRepoSourceProvenanceResponse",
      "properties": {
        "baselined_failures": {
          "items": {
            "$ref": "BaselinedFailuresMap"
          },
          "type": "array"
        },
        "err_msg": {
          "type": "string"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "SUCCESS",
            "FAILURE"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidationFailure": {
      "id": "ValidationFailure",
      "properties": {
        "failed_emails": {
          "items": {
            "$ref": "FailedEmail"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ValidationResult": {
      "id": "ValidationResult",
      "properties": {
        "message": {
          "type": "string"
        },
        "state": {
          "enum": [
            "UNKNOWN_STATE",
            "CHECK_PASSED",
            "CHECK_ERRORED",
            "CHECK_FAILED"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "content/v1/",
  "version": "v1"
}